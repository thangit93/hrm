<?php
/**
 * Created by PhpStorm.
 * User: Thilina
 * Date: 8/13/17
 * Time: 8:04 AM
 */

namespace Attendance\Common\Model;

use Attendance\Admin\Api\AttendanceUtil;
use DateTime;
use Employees\Common\Model\Employee;
use Model\BaseModel;

class Attendance extends BaseModel
{
    public $table = 'Attendance';

    public function getAdminAccess()
    {
        return array('get', 'element', 'save', 'delete');
    }

    public function getManagerAccess()
    {
        return array('get', 'element', 'save', 'delete');
    }

    public function getUserAccess()
    {
        return array('get');
    }

    public function getUserOnlyMeAccess()
    {
        return array('element', 'save', 'delete');
    }

    public function Find($whereOrderBy, $bindarr = false, $pkeysArr = false, $extra = array())
    {
        if (is_array($bindarr)) {
            foreach ($bindarr as $index => $value) {
                if ($index < 1) {
                    continue;
                }

                if (stripos($value, '/') === false) {
                    continue;
                }

                $value = str_replace('%', '', $value);
                $value = explode('/', $value);
                if ((int)$value[0] < 10) {
                    $value[0] = "0{$value[0]}";
                }
                $value = array_reverse($value);
                $value = implode('-', $value);
                $bindarr[$index] = "%{$value}%";
            }
        }

        return parent::Find($whereOrderBy, $bindarr, $pkeysArr, $extra); // TODO: Change the autogenerated stub
    }

    public function getCustomFilterQuery($filter)
    {
        $query = "";
        $queryData = array();
        foreach ($filter as $k => $v) {
            if (empty($v)) {
                continue;
            }
            if (is_array($v)) {
                if (empty($v)) {
                    continue;
                }
                $length = count($v);
                for ($i = 0; $i < $length; $i++) {
                    if ($i == 0) {
                        $query .= " and (";
                    }

                    $query .= $k . " like ?";

                    if ($i < $length - 1) {
                        $query .= " or ";
                    } else {
                        $query .= ")";
                    }
                    $queryData[] = "%" . $v[$i] . "%";
                }
            } else {
                if (!empty($v) && $v != 'NULL') {
                    if (in_array($k, ['in_time',])) {
                        $date = \DateTime::createFromFormat('Y-m-d', "{$v}-26");
                        $startDate = clone $date;
                        $endDate = clone $date;
                        $startDate->sub(\DateInterval::createFromDateString('1 month'));
                        $endDate->sub(\DateInterval::createFromDateString('1 day'));
                        $query .= " and ((DATE_FORMAT(in_time, '%Y-%m-%d') >= '{$startDate->format('Y-m-d')}' AND DATE_FORMAT(in_time, '%Y-%m-%d') <= '{$endDate->format('Y-m-d')}') OR (DATE_FORMAT(out_time, '%Y-%m-%d') >= '{$startDate->format('Y-m-d')}' AND DATE_FORMAT(out_time, '%Y-%m-%d') <= '{$endDate->format('Y-m-d')}'))";
                        $v = null;
                    } else {
                        $query .= " and " . $k . "=?";
                    }
                    if ($v == '__myid__') {
                        $v = $this->getCurrentProfileId();
                    }
                    if (!empty($v)) {
                        $queryData[] = $v;
                    }
                }
            }
        }

        return array($query, $queryData);
    }

    public function getAttendanceDateByMonth($filter)
    {
        $query = "";
        $queryData = array();
        foreach ($filter as $k => $v) {
            if (empty($v)) {
                continue;
            }
            if (is_array($v)) {
                if (empty($v)) {
                    continue;
                }
                $length = count($v);
                for ($i = 0; $i < $length; $i++) {
                    if ($i == 0) {
                        $query .= " and (";
                    }

                    $query .= $k . " like ?";

                    if ($i < $length - 1) {
                        $query .= " or ";
                    } else {
                        $query .= ")";
                    }
                    $queryData[] = "%" . $v[$i] . "%";
                }
            } else {
                if (!empty($v) && $v != 'NULL') {
                    if (in_array($k, ['in_time', 'out_time'])) {
                        if ($k == 'in_time') {
                            $query .= " and " . $k . " >= ?";
                            $v = "{$v} 00:00:00";
                        } else {
                            $query .= " and " . $k . " <= ?";
                            $v = "{$v} 23:59:59";
                        }
                    } else {
                        $query .= " and " . $k . "=?";
                    }
                    if ($v == '__myid__') {
                        $v = $this->getCurrentProfileId();
                    }
                    $queryData[] = $v;
                }
            }
        }

        return array($query, $queryData);
    }

    public function postProcessGetData($obj)
    {
        $inTimeObj = \DateTime::createFromFormat('Y-m-d H:i:s', $obj->in_time);
        $outTimeObj = \DateTime::createFromFormat('Y-m-d H:i:s', $obj->out_time);

        if ($inTimeObj) {
            $obj->working_date = $inTimeObj->format('d/m/Y');
            $obj->in_time = $inTimeObj->format('H:i');
        }

        if ($outTimeObj) {
            $obj->working_date = $outTimeObj->format('d/m/Y');
            $obj->out_time = $outTimeObj->format('H:i');
        }

        if ($inTimeObj && $outTimeObj) {
            $obj->real_hours = ($inTimeObj->diff($outTimeObj))->h;
        }

        return $obj;
    }
}